@ngdoc overview
@name API Documentation
@description

# `stormpath-sdk-angular` module for Angular.js [BETA]

## Overview

Used in conjuction with Stormpath on your backend, this module provides
Angular services which allow you to:

* Authenticate username & password and get the Account object
* Use tokens (JWTs) as a stateless session mechanism
* Show or hide parts of your UI in response to the current user state
* Use [`ui-router`][ui-router] or
[`$routeProvider`](https://docs.angularjs.org/api/ngRoute/provider/$routeProvider)
to declare rules at a global level


## Backed Integration

This module is intended to be used with a Stormpath SDK on your server.  Our
[Stormpath Express SDK][stormpath-sdk-express] is specifically designed for this.
We support many other langues as well, please see [docs.stormpath.com]

By default the Angular application expects to find the `/oauth/token` and
`/api/users/current` endpoints.  If you need to use alternate URLs you can
configure them using the {@link $stormpath} provider.

## Using with Express.js

If your backed is written in Express, add the
[Stormpath Express SDK][stormpath-sdk-express]
module to your package dependencies then use Stormpath with your
Express app:

### Example
<pre>
var express = require('express');
var stormpathSdkExpress = require('stormpath-sdk-express');

var app = express();

var spMiddleware = stormpathSdkExpress.createMiddleware({
  appHref: 'YOUR_APP_HREF',
  apiKeyId: 'YOUR_API_KEY_ID',
  apiKeySecret: 'YOUR_API_KEY_SECRET'
});

app.use(spMiddleware);

app.get('/api/users/current',function(req,res){
  res.json(req.user);
});

</pre>


## How token authentication works

### Token creation and storage

When a user logs in the server will issue an access token in the form of a
JWT.  This access token will be stored in an HTTP-only cookie, and will also
set the Secure flag (so that it is only sent over HTTPS) in your production
environment.

You may have heard that cookie are insecure, but that is a vague statement.
The truth is that HTTP-only cookies, espeically Secure-only cookies, are the
most secure place to store authentication information becuase the Javascript
environment cannot access them.  This is the best way to protect yourself
from XSS attacks.

### Token expiration and revocation

Access tokens are valid until they expire.  You should set an expiration (TTL) that
makes sense for your application.  The TTL is controlled on your server.  If you
are using the [Stormpath Express SDK][stormpath-sdk-express] you want to
configure the `accessTokenTtl` options.

If you need the ability to revoke specific tokens you can maintain a cache of issued
tokens on your server.  All tokens have a `jti` field which is a unique nonce for each token.

[docs.stormpath.com]: https://docs.stormpath.com
[ui-router]: https://github.com/angular-ui/ui-router
[stormpath-sdk-node]: https://github.com/stormpath/stormpath-sdk-node "Stormpath Node SDK"

[stormpath-sdk-express]: https://github.com/stormpath/stormpath-sdk-express "Stormpath Express SDK"